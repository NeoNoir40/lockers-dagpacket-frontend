import { useState, useEffect } from "react";
import DhlLogo from "../../../assets/images/logos/dhl-logo.svg";
import FedexLogo from "../../../assets/images/logos/fedex-logo.svg";
import EstafetaLogo from "../../../assets/images/logos/estafeta-logo-png-transparent.png";
import PaqueteExLogo from "../../../assets/images/logos/Paquetexpress Logo Vector.svg";
import axios from "axios";
import ShipmentServices from "../../../components/ShipmentServices";
import ShipmentInfo from "../../../components/ShipmentInfo";
const logoMap = {
  Fedex: FedexLogo,
  Superenvios: "",
  "Paquete Express": PaqueteExLogo,
  DHL: DhlLogo,
  Estafeta: EstafetaLogo,
};

const inputFields = [
  { label: "Nombre", key: "name", type: "text" },
  { label: "Colonia", key: "colony", type: "text" },
  { label: "Calle", key: "street", type: "text" },
  { label: "Ciudad", key: "city", type: "text" },
  { label: "Estado", key: "state", type: "text" },
  { label: "País", key: "country", type: "text" },
  { label: "Teléfono", key: "phone", type: "tel" },
  { label: "Correo Electrónico", key: "email", type: "email" },
];

const packageFields = [
  { label: "Alto", key: "height", type: "number" },
  { label: "Ancho", key: "width", type: "number" },
  { label: "Largo", key: "length", type: "number" },
  { label: "Peso", key: "weight", type: "number" },
  { label: "Seguro", key: "insurance", type: "checkbox" },
  { label: "Valor", key: "value", type: "number" },
  { label: "Descripción", key: "description", type: "text" },
  { label: "Codigo Postal", key: "zipCode", type: "number" },
];

const PackageFormSection = ({ title, data, onChange, disabled }) => (
  <div className="w-full bg-white p-6 rounded-lg shadow-md">
    <h3 className="text-2xl font-semibold mb-4">{title}</h3>
    <div className="grid grid-cols-1 gap-4">
      {packageFields.map(({ label, key }) => (
        <InputField
          key={key}
          label={label}
          value={data[key]}
          type={key === "insurance" ? "checkbox" : "number"}
          onChange={(e) => onChange({ ...data, [key]: e.target.value })}
          disabled={disabled}
        />
      ))}
    </div>
  </div>
);

const InputField = ({ label, value, onChange, disabled, type }) => (
  <input
    type={type}
    placeholder={label}
    value={value || ""}
    onChange={onChange}
    disabled={disabled}
    className={`border border-gray-300 p-3 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 ${
      disabled ? "bg-gray-200 cursor-not-allowed" : ""
    }`}
  />
);

const FormSection = ({ title, data, onChange, disabled }) => (
  <div className=" bg-white p-6 rounded-lg shadow-md">
    <h3 className="text-2xl font-semibold mb-4">{title}</h3>
    <div className="grid grid-cols-1 gap-4">
      {inputFields.map(({ label, key }) => (
        <InputField
          key={key}
          label={label}
          value={data[key]}
          onChange={(e) => onChange({ ...data, [key]: e.target.value })}
          disabled={disabled}
        />
      ))}
    </div>
  </div>
);

export default function Step3({
  destinationCP,
  handleClick,
  handleSenderDataChange,
  handleRecipientDataChange,
  handleCompanySelection,
  shippingData,
  handlePackageDataChange,
}) {
  //Nuevos estados para el flujo de la cotización

  const [showConfirmation, setShowConfirmation] = useState(false);
  const [isConfirmedPackage, setIsConfirmedPackage] = useState(false);
  const [goToUserDetails, setGoToUserDetails] = useState(false);
  const [goToDetails, setGoToDetails] = useState(false);
  const [isConfirmedQuote, setIsConfirmedQuote] = useState(false);
  const [isConfirmed, setIsConfirmed] = useState(false);
  const [selectedQuote, setSelectedQuote] = useState(null);
  const [quote, setQuote] = useState(null);
  const [userData, setUserData] = useState(null);
  const [packageData, setPackageData] = useState(null);
  const [data, setData] = useState({
    pais_origen: "MX",
    pais_destino: "MX",
    cp_origen: "", // Inicialmente vacío, se actualizará con los datos del paquete
    cp_destino: "", // Se actualizará con el código postal del destinatario
    alto: 0,
    ancho: 0,
    largo: 0,
    peso: 0,
    seguro: false,
    valor_declarado: 0,
  });

  useEffect(() => {
    if (destinationCP) {
      handleRecipientDataChange({
        ...shippingData.recipient,
        zipCode: destinationCP,
      });
    }
  }, [destinationCP]);

  // Para mostrar los datos del paquete en el formulario de confirmación
  const handleContinue = () => {
    setShowConfirmation(true);
  };

  const handleDetails = () => {
    setGoToDetails(true);
  };
  // Para mostrar los datos del paquete en el formulario de confirmación
  const handleConfirm = async () => {
    const updatedData = {
      pais_origen: "MX",
      pais_destino: "MX",
      cp_origen: shippingData.package.zipCode,
      cp_destino: shippingData.recipient.zipCode,
      alto: shippingData.package.height,
      ancho: shippingData.package.width,
      largo: shippingData.package.length,
      peso: shippingData.package.weight,
      seguro: shippingData.package.insurance,
      valor_declarado: shippingData.package.value,
    };

    setData(updatedData);
    setShowConfirmation(false);
    setIsConfirmed(false);
    setIsConfirmedPackage(true);
    fetchQuote(updatedData);
    console.log("Click en confirmar");
  };

  // Para obtener la cotización de envío
  const fetchQuote = async (dataToSend) => {
    try {
      const response = await axios.post(
        "http://localhost:3000/api/v1/shipping/quote",
        dataToSend
      );
      console.log("Datos enviados:", dataToSend);
      console.log("Quote:", response.data);
      setQuote(response.data);
    } catch (error) {
      console.log("Error fetching quote:", error);
    }
  };

  //
  const handleConfirmQuote = () => {
    setIsConfirmedQuote(true);
  };

  const handleEdit = () => {
    setShowConfirmation(false);
    setIsConfirmedPackage(false);
  };

  const handleConfirmPackage = () => {
    setIsConfirmedPackage(true);
  };

  const handleContinueStep = () => {
    handleClick(4);
  };

  const handleSelectQuote = (quote) => {
    setSelectedQuote(quote);
    console.log("Quote seleccionado:", quote);
    handleCompanySelection(quote);
  };

  const hideUserDetails = () => {
    setUserData(false);
    setPackageData(true);
  };

  const handleUserData = () => {
    setUserData(true);
    setGoToUserDetails(true);
  };

  return (
    <div className="p-6">
      {!goToUserDetails && (
        <>
          {showConfirmation ? (
            <div>
              <h1 className="text-3xl font-semibold mb-6">Confirmar Datos</h1>
              <div className="flex gap-8">
                <PackageFormSection
                  title="Datos del Paquete"
                  data={shippingData.package}
                  onChange={handlePackageDataChange}
                  disabled={true} // Deshabilitar inputs
                />
              </div>
              <div className="flex gap-4 mt-6">
                {!isConfirmedPackage && (
                  <button
                    onClick={handleConfirm}
                    className="bg-orange-500 text-white text-xl font-semibold px-6 py-3 rounded-full">
                    Confirmar 2
                  </button>
                )}
              </div>
              {isConfirmedPackage && (
                <>
                  <h2 className="text-2xl font-semibold mt-6">
                    Compañias de Envíos
                  </h2>
                </>
              )}
            </div>
          ) : (
            <div>
              <div className="flex gap-8">
                <PackageFormSection
                  title="Datos del Paquete"
                  data={shippingData.package}
                  onChange={handlePackageDataChange}
                  disabled={false} // Habilitar inputs
                />
              </div>

              <button
                onClick={handleContinue}
                className="bg-orange-500 text-white text-xl font-semibold px-6 py-3  mt-6 rounded-full">
                Continuar 1
              </button>
            </div>
          )}
          <>
            {isConfirmedPackage && (
              <>
                <ShipmentServices
                  handleClick={handleSelectQuote}
                  quote={quote}
                />
                <button
                  onClick={handleUserData}
                  className="bg-orange-500 text-white text-xl font-semibold px-6 py-3 rounded-lg mt-6">
                  Continuar 3
                </button>
              </>
            )}
          </>
        </>
      )}
      ¨{" "}
      <>
        {userData && (
          <>
            <div className="grid grid-cols-2 gap-10">
              <FormSection
                title="Datos del Remitente"
                data={shippingData.sender}
                onChange={handleSenderDataChange}
                disabled={false} // Habilitar inputs
              />
              <FormSection
                title="Datos del Destinatario"
                data={shippingData.recipient}
                onChange={handleRecipientDataChange}
                disabled={false} // Habilitar inputs
              />
              <button
                onClick={hideUserDetails}
                className="bg-orange-500 text-white text-xl font-semibold px-6 py-3 rounded-lg mt-6">
                Continuar 4
              </button>
            </div>
          </>
        )}
        {packageData && (
          <>
            <ShipmentInfo data={shippingData} />
            <button
              onClick={handleContinueStep}
              className="bg-orange-500 text-white text-xl font-semibold px-6 py-3 rounded-lg mt-6">
              Continuar 4
            </button>
          </>
        )}
      </>
    </div>
  );
}
